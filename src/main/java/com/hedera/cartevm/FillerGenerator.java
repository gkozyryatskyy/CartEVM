package com.hedera.cartevm;

/*-
 * ‌
 * CartEVM
 * ​
 * Copyright (C) 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class FillerGenerator {

  private static final String template =
      """
      %1$s:

        env:
          currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
          currentDifficulty: '0x20000'
          currentGasLimit: "100000000"
          currentNumber: "1"
          currentTimestamp: "1000"
          previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6

        _info:
          comment: auto-generated by CartEVM

        pre:
          cccccccccccccccccccccccccccccccccccccccc:
            balance: '0x0ba1a9ce0ba1a9ce'
            code: |
              :yul  {
                // %1$s
                %3$s
                for { let i := 0 } lt(i, %2$s) { i := add(i, 1) } {
                  %4$s
                }
                %5$s
              }
            nonce: 1
            storage: {}

          a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
            balance: '0x0ba1a9ce0ba1a9ce'
            code: '0x'
            nonce: '0'
            storage: {}

        transaction:
          data:
          - :label test
          gasLimit:
          - '%6$s'
          gasPrice: '10'
          nonce: '0'
          to: cccccccccccccccccccccccccccccccccccccccc
          secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
          value:
          - 0

        expect:
          - indexes:
              data: !!int -1
              gas:  !!int -1
              value: !!int -1

            network:
              - '>=Istanbul'
            result:
              cccccccccccccccccccccccccccccccccccccccc:
                storage:
                  0x00: 0
                  """;

  final List<Step> steps;
  final int unrolledLoopSize;
  final int outerLoopSize;
  final long gasLimit;
  private final String name;

  public FillerGenerator(List<Step> steps, int unrolledLoopSize, int outerLoopSize, long gasLimit) {
    this.steps = steps;
    this.unrolledLoopSize = unrolledLoopSize;
    this.outerLoopSize = outerLoopSize;
    this.gasLimit = gasLimit;
    this.name = "Cartesian_" + steps.stream().map(Step::getName).collect(Collectors.joining("_"));
  }

  public String getName() {
    return name;
  }

  public String generate() {
    StringBuffer inner = new StringBuffer("verbatim_0i_0o(hex\"");
    steps.forEach(step -> inner.append(step.globalSetupCode));

    List<Step> backwardsSteps = new ArrayList<>(steps);
    Collections.reverse(backwardsSteps);
    for (int i = 0; i < unrolledLoopSize; i++) {
      switch (i % 2) {
        case 0 -> steps.forEach(
            step -> {
              inner.append(step.localSetupCode);
              inner.append(step.executionCode);
              inner.append(step.localCleanupCode);
            });
        case 1 -> {
          backwardsSteps.forEach(step -> inner.append(step.localSetupCode));
          steps.forEach(
              step -> {
                inner.append(step.executionCode);
                inner.append(step.localCleanupCode);
              });
        }
      }
    }
    inner.append("\")");

    String globalSetup =
        steps.stream()
            .map(Step::getGlobalSetupCode)
            .filter(s -> !s.isEmpty())
            .collect(Collectors.joining());
    String globalCleanup =
        steps.stream()
            .map(Step::getGlobalCleanupCode)
            .filter(s -> !s.isEmpty())
            .collect(Collectors.joining());
    return template.formatted(
        name,
        outerLoopSize,
        globalSetup.isEmpty() ? "" : "verbatim_0i_0o(hex\"" + globalSetup + "\")",
        inner,
        globalCleanup.isEmpty() ? "" : "verbatim_0i_0o(hex\"" + globalCleanup + "\")",
        gasLimit);
  }
}
