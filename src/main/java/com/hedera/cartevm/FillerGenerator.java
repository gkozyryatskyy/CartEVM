package com.hedera.cartevm;

/*-
 * ‌
 * CartEVM
 * ​
 * Copyright (C) 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

public class FillerGenerator extends CodeGenerator {

  private static final String template =
      """
                    %1$s:

                      env:
                        currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
                        currentDifficulty: '0x20000'
                        currentGasLimit: "100000000"
                        currentNumber: "1"
                        currentTimestamp: "1000"
                        previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6

                      _info:
                        comment: auto-generated by CartEVM

                      pre:
                        cccccccccccccccccccccccccccccccccccccccc:
                          balance: '0x0ba1a9ce0ba1a9ce'
                          code: |
                            :yul\s"""
          + yulTemplate
          + """
                        nonce: 1
                        storage: {}

                      72657475726e207465737420636f6e7472616374:
                        balance: '0x0ba1a9ce0ba1a9ce'
                        code: :raw 0x3360005260206000f3
                        nonce: '0'
                        storage: {}

                      726576657274207465737420636f6e7472616374:
                        balance: '0x0ba1a9ce0ba1a9ce'
                        code: :raw 0x6055605555604360a052600160a0FD
                        nonce: '0'
                        storage: {}

                      a94f5374Fce5edBC8E2a8697C15331677e6EbF0B:
                        balance: '0x0ba1a9ce0ba1a9ce'
                        code: ''
                        nonce: '0'
                        storage: {}

                    transaction:
                      data:
                      - :label test
                      gasLimit:
                      - '30000000'
                      gasPrice: '10'
                      nonce: '0'
                      to: cccccccccccccccccccccccccccccccccccccccc
                      secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
                      value:
                      - 0

                    expect:
                      - indexes:
                          data: !!int -1
                          gas:  !!int -1
                          value: !!int -1

                        network:
                          - '>=Istanbul'
                        result:
                          cccccccccccccccccccccccccccccccccccccccc:
                            storage:
                              0x00: 0
                              """;

  public FillerGenerator(List<Step> steps, long gasLimit, int sizeLimit) {
    super(steps, gasLimit, sizeLimit);
  }

  @Override
  public String getName() {
    return "CartEVM_" + super.getName();
  }

  public void createFiller(File outDir) throws IOException {
    String name = getName();
    System.out.println(name);
    Path outputFile = outDir.toPath().resolve(name + "Filler.yml");
    System.out.println(outputFile);
    Files.writeString(outputFile, generate(template));
  }
}
